# -*- coding: utf-8 -*-
"""Лабораторная 2_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-AgpdYPF4LIHql9WfZ_3yvYgj3jt4yN7

1. Ученые нашли табличку с текстом на языке племени Мумба-Юмба (файл input_1.txt). Определите, сколько различных слов содержится в этом тексте. Словом считается последовательность непробельных символов идущих подряд, слова разделены одним или большим числом пробелов или символами конца строки. Большие и маленькие буквы считаются различными.
"""

x = open('input_1.txt','r', encoding = 'utf8')
a = []
s = x.readlines()
for i in s:
  a+=i.split()
print(len(set(a)))
x.close()

"""2. В файле (файл input_2.txt) записаны строки. В качестве ответа выведите все строки наибольшей длины из входного файла, не меняя их порядок."""

x = open('input_2.txt','r', encoding = 'utf8')
s = x.readlines()
r=0
for i in range(len(s)):
    if r<len(s[i]):
        r=len(s[i])
for i in range(len(s)):
    if len(s[i])==r:
        s[i]=s[i].split()
        print(' '.join(s[i]))
x.close()

"""3. Выведите в обратном порядке содержимое всего файла полностью (файл input_3.txt). """

x = open('input_3.txt','r', encoding = 'utf8')
s = x.read()
print(s[::-1])
x.close()

"""4. Имеется файл с данными по результатам экзаменов абитуриентов (файл input_4.txt). Он представляет из себя набор строк, где в каждой строке записана следующая информация:
Фамилия;Балл_по_математике;Балл_по_физике;Балл_по_русскому_языку
Поля внутри строки разделены точкой с запятой, баллы — целые числа.
Напишите программу, которая считывает файл с подобной структурой и для каждого абитуриента выводит его средний балл по этим трём предметам на отдельной строке, соответствующей этому абитуриенту. И упорядочите результаты по убыванию среднего балла. 
Также в конце файла, на отдельной строке, через пробел запишите средние баллы по математике, физике и русскому языку по всем абитуриентам.

"""

students = []
sred = []
math = []
physics = []
russian = []
x = open('input_4.txt','r', encoding = 'utf8')
s = x.readlines()
for line in s:
  S = line.strip().split(';')
  students.append(str(S[0]))
  math.append(int(S[1]))
  physics.append(int(S[2]))
  russian.append(int(S[3]))
for i in range(len(math)):
  sred.append((students[i], ((math[i] + physics[i] + russian[i]) / 3)))
def sort(sred):
  return sorted(sred, key = lambda x: -x[1])
print(*sort(sred), sep = ' \n')
if len(math) > 0:
   print(str(sum(math) / len(math)) + ' ' + str(sum(physics) / len(physics)) + ' ' + str(sum(russian) / len(russian)))
x.close()

"""5. Дан текст на языке племени Мумба-Юмба (файл input_5.txt). Выведите все слова, встречающиеся в тексте, разделяя их пробелом. Слова должны быть отсортированы по убыванию их количества появления в тексте, а при одинаковой частоте появления — в алфавитном порядке."""

x = open('input_5.txt', 'r', encoding = 'utf-8')
S=x.readlines()
s = []
for i in S:
  s.append(i.strip())
s1=[]
for k in s:
  s1.extend(k.split(' '))
s2=dict()
for l in s1:
  if l in s2:
    s2[l] += 1
  else:
    s2[l] = 1
b={}
for k in sorted(s2, key=len, reverse=True):
  b[k] = s2[k]
keys = list(b.items())
keys.sort(key = lambda i: (-i[1], i[0]))
for i in keys:
  print(i[0], ':', i[1])
x.close()

"""6. В текстовом файле (файл input_6.txt) имеются следующие данные о московских квартирах: 
n – номер квартиры по порядку;
price – цена квартиры, $1000;
totsp – общая площадь квартиры, кв.м.;
livesp – жилая площадь квартиры, кв.м.;
kitsp – площадь кухни, кв.м.;
dist – расстояние от центра в км.;
metrdist – расстояние до метро в минутах;
walk – принимает два значения 0 и 1, 1 – квартира расположена в пешей доступности от метро, 0 – на транспорте;
brick – принимает два значения 0 и 1, 1 – квартира расположена в кирпичном доме, 0 – в другом;
floor – принимает два значения 0 и 1, 1 – квартира расположена на любом этаже кроме первого и последнего, 0 – иначе;
code – целое число от 1 до 8, при помощи которого наблюдения сгруппированы по подвыборкам:
1.Наблюдения сгруппированы на севере, вокруг Калужско-Рижской линии метрополитена
2.Север, вокруг Серпуховско-Тимирязевской линии метрополитена
3.Северо-запад, вокруг Замоскворецкой линии метрополитена
4.Северо-запад, вокруг Таганско-Краснопресненской линии метрополитена
5.Юго-восток, вокруг Люблинской линии метрополитена
6.Юго-восток, вокруг Таганско-Краснопресненской линии метрополитена
7.Восток, вокруг Калиниской линии метрополитена
8.Восток, вокруг Арбатско-Покровской линии метрополитена. 
Ученый с мировым именем Иннокентий выбирает себе квартиру по следующим критериям:
- пешая доступность метро
- расстояние до метро в минутах как можно меньше
- жилая площадь как можно больше
- цена как можно меньше
Помогите ученому подобрать 10 квартир, наиболее подходящих его требованиям: отсортируйте имеющиеся данные по указанным признакам (признаки указаны в порядке убывания важности) и выведите в первый файл первые 10 квартир в полученном упорядоченном списке. 
Студентка Люсенька тоже выбирает квартиру, руководствуясь другими соображениями:
- квартира находится вокруг Замоскворецкой линии метрополитена
- цена как можно меньше
- площадь кухни как можно больше
- квартира в кирпичном доме
Помогите Люсеньке подобрать 15 квартир, наиболее отвечающих ее требованиям: отсортируйте имеющиеся данные по указанным признакам (признаки указаны в порядке убывания важности) и выведите во второй файл первые 15 квартир в полученном упорядоченном списке. 



"""

x = open('input_6.txt', 'r', encoding = 'utf-8')
s=x.readlines()
S = []
A = []
for line in s:
  A.append(line.strip().split('\t'))
for i in range(1, len(A)):
  S.append([float(j) for j in A[i]])
def sort(S):
  return sorted(S, key = lambda x: (-x[7], -x[6], x[3], -x[1]))
print(*sort(S)[:10], sep='\n')
print('\n')
s1=[]
for j in range(len(S)):
  if S[j][10] == 3.0:
    s1.append(S[j])
def sort1(s1):
  return sorted(s1, key = lambda x: (x[1], -x[4], -x[8]))
print(*sort1(s1)[:15], sep='\n')
x.close()

"""7. Напишите программу, которая считывает из файла (файл input_7.txt) список игр футбольных команд с результатом матча и выводит в новый файл сводную таблицу результатов всех матчей.
За победу команде начисляется 3 очка, за поражение — 0, за ничью — 1.
Результаты игры записаны в файле в следующем формате:
Первая_команда;Забито_первой_командой;Вторая_команда;Забито_второй_командой
Вывод программы необходимо оформить следующим образом:
Команда: Всего_игр Побед Ничьих Поражений Всего_очков
Команды необходимо упорядочить по числу набранных очков. 

"""

x = open('input_7.txt','r', encoding = 'utf8')
s = x.readlines()
lst=[]
S=[]
fin=[]
for line in s:
  lst.append(line.strip( ).split(';'))
  import itertools
  vs = [(x[0], x[2]) for x in lst] 
  clubs = set(itertools.chain.from_iterable(vs))
  res = {club:[0, 0, 0, 0, 0] for club in clubs}
for kom1, gol1, kom2, gol2 in lst:
    res[kom1][0] += 1
    res[kom2][0] += 1
    if int(gol1) > int(gol2):
        res[kom1][1] += 1
        res[kom1][4] += 3
        res[kom2][3] += 1
    elif int(gol1) < int(gol2):
        res[kom2][1] += 1
        res[kom2][4] += 3
        res[kom1][3] += 1
    elif int(gol1) == int(gol2):
        res[kom1][2] += 1
        res[kom1][4] += 1
        res[kom2][2] += 1
        res[kom2][4] += 1
for club in clubs:
    S.append((club, res[club]))
def sort(S):
  return sorted(S, key = lambda x: -x[1][4])
print(*sort(S), sep = ' \n')
x.close()

"""8. Дан файл (input_8.txt). Определите сколько в нем букв (латинского алфавита), слов, строк. Выведите три найденных числа в формате, приведенном в примере. Словом считается последовательность больших и маленьких латинских букв (для проверки того, состоит ли строка только из латинских букв удобно пользоваться методом isalpha()). Все остальные символы считаются разделителями слов."""

S = open('input_8.txt','r', encoding = 'utf8')
lines = 0
words = 0
letters = 0
s = S.readlines()
for line in s:
    lines += 1
    letters += len(line)
    pos = 'out'
    for letter in line:
        if letter != ' ' and pos == 'out':
            words += 1
            pos = 'in'
        elif letter == ' ':
            pos = 'out'
print(letters,'строк')
print(words,'слов')
print(lines,'букв')
S.close()